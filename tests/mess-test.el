
(ert-deftest mess//tree-test-get ()
  (should (equal (mess/tree-get '() '()) '()))
  (should (equal (mess/tree-get '(1 (2) (3 (4))) '()) '(1 (2) (3 (4)))))
  (should (equal (mess/tree-get '(1 (2) (3 (4))) '(1)) '(3 (4))))
  (should (equal (mess/tree-get '(1 (2) (3 (4))) '(1 0)) '(4)))
  (should (equal (mess/tree-get '(1 (2) (3 (4))) '(0)) '(2))))

(ert-deftest mess//tree-test-insert-branch ()
  (should (equal (mess/tree-insert-branch
                  '(1 (2 (3 (4))))
                  '(0)
                  '(5 (6)))
                 '(1 (2 (3 (4))
                        (5 (6))))))
  (should (equal (mess/tree-insert-branch
                  '(1)
                  '()
                  '(5 (6)))
                 '(1 (5 (6)))))
  (should (equal (mess/tree-insert-branch
                  '(1 (2) (3 (4)))
                  '(1)
                  '(5 (6)))
                 '(1 (2) (3 (4) (5 (6))))))
  (should (equal (mess/tree-insert-branch
                  '(1 (2 (3 (4) (5 (6))))
                      (7 (8) (9 (10))))
                  '(1 1)
                  '(11 (12)))
                 '(1 (2 (3 (4) (5 (6))))
                     (7 (8) (9 (10) (11 (12)))))))
  (should (equal (mess/tree-insert-branch
                  '(1 (2 (3 (4))
                         (5 (6))))
                  '(0 1)
                  '(7 (8 (9))))
                 '(1 (2 (3 (4))
                        (5 (6)
                           (7 (8 (9)))))))))

(ert-deftest mess//tree-test-insert-value ()
  (should (equal (mess/tree-insert-value '(1 (2 (3 (4)))) '() 0)
                 '(1 (0 (2 (3 (4)))))))
  (should (equal (mess/tree-insert-value '(1 (2 (3 (4)))) '(0) 0)
                 '(1 (2 (0 (3 (4)))))))
  (should (equal (mess/tree-insert-value '(1 (2 (3 (4)))) '(0 0 0) 0)
                 '(1 (2 (3 (4 (0)))))))
  (should (equal (mess/tree-insert-value '(1 (2 (3 (4)) (5 (6)))) '(0) 0)
                 '(1 (2 (0 (3 (4)) (5 (6)))))))
  (should (equal (mess/tree-insert-value '(1 (2 (3 (4)) (5 (6)))) '(0 0) 0)
                 '(1 (2 (3 (0 (4))) (5 (6)))))))

(ert-deftest mess//character-test-builds ()
  (should (let ((commands (list (list :timestamp 1 :key "a" :op 'org-self-insert-command)
                                (list :timestamp 2 :key "b" :op 'org-self-insert-command)
                                (list :timestamp 3 :key "" :op 'org-delete-backward-char)
                                (list :timestamp 4 :key "c" :op 'org-self-insert-command))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0) (("a" . 1) (("b" . 2)) (("c" . 4)))))))
  (should (let ((commands (list (list :timestamp 1 :key "a" :op 'org-self-insert-command)
                                (list :timestamp 2 :key "b" :op 'org-self-insert-command)
                                (list :timestamp 3 :key "" :op 'left-char)
                                (list :timestamp 4 :key "c" :op 'org-self-insert-command))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0) (("a" . 1) (("c" . 4) (("b". 2))))))))
  (should (let ((commands (list (list :timestamp 1 :key "" :op 'left-char))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0)))))
  (should (let ((commands (list (list :timestamp 1 :key "" :op 'left-char)
                                (list :timestamp 1 :key "" :op 'left-char))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0)))))
  (should (let ((commands (list (list :timestamp 1 :key "" :op 'org-delete-backward-char))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0)))))
  (should (let ((commands (list (list :timestamp 1 :key "a" :op 'org-self-insert-command)
                                (list :timestamp 2 :key "b" :op 'org-self-insert-command)
                                (list :timestamp 3 :key "" :op 'org-delete-backward-char)
                                (list :timestamp 4 :key "c" :op 'org-self-insert-command)
                                (list :timestamp 5 :key "" :op 'right-char)
                                (list :timestamp 6 :key "" :op 'right-char)
                                (list :timestamp 7 :key "" :op 'right-char)
                                (list :timestamp 8 :key "d" :op 'org-self-insert-command))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0) (("a" . 1) (("b" . 2)) (("c" . 4) (("d" . 8))))))))
  (should (let ((commands (list (list :timestamp 1 :key "a" :op 'org-self-insert-command)
                                (list :timestamp 2 :key "b" :op 'org-self-insert-command)
                                (list :timestamp 3 :key "c" :op 'org-self-insert-command)
                                (list :timestamp 4 :key "" :op 'left-char)
                                (list :timestamp 5 :key "" :op 'left-char)
                                (list :timestamp 6 :key "" :op 'right-char)
                                (list :timestamp 7 :key "d" :op 'org-self-insert-command))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0) (("a" . 1) (("b" . 2) (("d" . 7) (("c" . 3)))))))))
  (should (let ((commands (list (list :timestamp 1 :key "a" :op 'org-self-insert-command)
                                (list :timestamp 2 :key "\n" :op 'org-self-insert-command)
                                (list :timestamp 3 :key "b" :op 'org-self-insert-command)
                                (list :timestamp 4 :key "c" :op 'org-self-insert-command)
                                (list :timestamp 5 :key "" :op 'delete-line)
                                (list :timestamp 6 :key "d" :op 'org-self-insert-command))))
            (equal (mess/build-character-tree commands)
                   '(("START" . 0) (("a" . 1) (("\n" . 2) (("b" . 3) (("c" . 4))) (("d" . 6)))))))))
